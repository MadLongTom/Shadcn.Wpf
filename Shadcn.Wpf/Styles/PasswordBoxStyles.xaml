<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Shadcn.Wpf.Controls">

    <!-- PasswordBox Template synchronized with TextBox -->
    <ControlTemplate x:Key="ShadcnPasswordBoxTemplate" TargetType="{x:Type controls:ShadcnPasswordBox}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            
            <!-- Main border with animation support -->
            <Border x:Name="PART_Border"
                    Grid.Row="0"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="2"
                    CornerRadius="{DynamicResource RadiusMd}"
                    Padding="{TemplateBinding Padding}"
                    RenderTransformOrigin="0.5,0.5">
                <Border.RenderTransform>
                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                </Border.RenderTransform>
                
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    
                    <!-- Placeholder Text with animation support -->
                    <TextBlock x:Name="PART_Placeholder"
                              Grid.Column="0"
                              Text="{TemplateBinding Placeholder}"
                              Foreground="{DynamicResource MutedForegroundBrush}"
                              VerticalAlignment="Center"
                              IsHitTestVisible="False"
                              Visibility="Collapsed"
                              Opacity="0">
                        <TextBlock.RenderTransform>
                            <TranslateTransform X="0" Y="0"/>
                        </TextBlock.RenderTransform>
                    </TextBlock>
                    
                    <!-- Password host -->
                    <Grid Grid.Column="0" VerticalAlignment="Center">
                        <PasswordBox x:Name="PART_PasswordBox"
                                     Background="Transparent"
                                     BorderThickness="0"
                                     FontSize="{TemplateBinding FontSize}"
                                     FontFamily="{TemplateBinding FontFamily}"
                                     Foreground="{TemplateBinding Foreground}"
                                     VerticalAlignment="Center"
                                     VerticalContentAlignment="Center"
                                     Padding="0">
                            <PasswordBox.Style>
                                <Style TargetType="PasswordBox">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsPasswordVisible, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </PasswordBox.Style>
                        </PasswordBox>
                        <TextBox x:Name="PART_VisibleTextBox"
                                 Background="Transparent"
                                 BorderThickness="0"
                                 FontSize="{TemplateBinding FontSize}"
                                 FontFamily="{TemplateBinding FontFamily}"
                                 Foreground="{TemplateBinding Foreground}"
                                 Text="{Binding Password, RelativeSource={RelativeSource TemplatedParent}}"
                                 VerticalAlignment="Center"
                                 VerticalContentAlignment="Center"
                                 Padding="0">
                            <TextBox.Style>
                                <Style TargetType="TextBox">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsPasswordVisible, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                    </Grid>

                    <!-- Toggle Button -->
                    <Button x:Name="ToggleButton"
                            Grid.Column="1"
                            Width="24"
                            Height="24"
                            Background="Transparent"
                            BorderThickness="0"
                            Cursor="Hand"
                            Margin="6,0,0,0">
                        <Button.Style>
                            <Style TargetType="Button">
                                <Setter Property="Visibility" Value="Visible"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="Button">
                                            <Border Background="{TemplateBinding Background}" CornerRadius="3">
                                                <TextBlock x:Name="Icon"
                                                           Text="👁"
                                                           FontSize="12"
                                                           Foreground="{DynamicResource MutedForegroundBrush}"
                                                           HorizontalAlignment="Center"
                                                           VerticalAlignment="Center"/>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter TargetName="Icon" Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
                                                </Trigger>
                                                <DataTrigger Binding="{Binding IsPasswordVisible, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:ShadcnPasswordBox}}}" Value="True">
                                                    <Setter TargetName="Icon" Property="Text" Value="🙈"/>
                                                </DataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ShowPasswordToggle, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </Grid>
            </Border>
            
            <!-- Helper Text -->
            <TextBlock x:Name="PART_HelperText"
                      Grid.Row="1"
                      Text="{TemplateBinding HelperText}"
                      FontSize="12"
                      Foreground="{DynamicResource MutedForegroundBrush}"
                      Margin="0,4,0,0"
                      Visibility="Visible"/>
        </Grid>

        
        <ControlTemplate.Triggers>
            <!-- Show placeholder when empty and not focused with fade animation -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Password" Value=""/>
                    <Condition Property="IsFocused" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Placeholder" Property="Visibility" Value="Visible"/>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PART_Placeholder"
                                           Storyboard.TargetProperty="Opacity"
                                           To="1"
                                           Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PART_Placeholder"
                                           Storyboard.TargetProperty="Opacity"
                                           To="0"
                                           Duration="0:0:0.15">
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseIn"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>
            
            <!-- Mouse hover effects -->
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PART_Border"
                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                           To="1.01"
                                           Duration="0:0:0.15">
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="PART_Border"
                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                           To="1.01"
                                           Duration="0:0:0.15">
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PART_Border"
                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                           To="1"
                                           Duration="0:0:0.15">
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="PART_Border"
                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                           To="1"
                                           Duration="0:0:0.15">
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            
            <!-- Default state - show subtle border -->
            <Trigger Property="IsFocused" Value="False">
                <Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource InputBrush}"/>
            </Trigger>
            
            <!-- Focus state with smooth border color transition and scale -->
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource RingBrush}"/>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PART_Border"
                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                           To="1.02"
                                           Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <BackEase EasingMode="EaseOut" Amplitude="0.3"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="PART_Border"
                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                           To="1.02"
                                           Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <BackEase EasingMode="EaseOut" Amplitude="0.3"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PART_Border"
                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                           To="1"
                                           Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="PART_Border"
                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                           To="1"
                                           Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            
            <!-- Invalid state with shake animation -->
            <Trigger Property="IsInvalid" Value="True">
                <Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource DestructiveBrush}"/>
                <Setter TargetName="PART_HelperText" Property="Foreground" Value="{DynamicResource DestructiveBrush}"/>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <!-- Shake animation -->
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Placeholder"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                <LinearDoubleKeyFrame KeyTime="0:0:0.05" Value="5"/>
                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="-5"/>
                                <LinearDoubleKeyFrame KeyTime="0:0:0.15" Value="3"/>
                                <LinearDoubleKeyFrame KeyTime="0:0:0.2" Value="-3"/>
                                <LinearDoubleKeyFrame KeyTime="0:0:0.25" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Border"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                <LinearDoubleKeyFrame KeyTime="0:0:0.05" Value="1.01"/>
                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0.99"/>
                                <LinearDoubleKeyFrame KeyTime="0:0:0.15" Value="1.005"/>
                                <LinearDoubleKeyFrame KeyTime="0:0:0.2" Value="0.995"/>
                                <LinearDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
            </Trigger>
            
            <!-- Error state -->
            <Trigger Property="HasError" Value="True">
                <Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource DestructiveBrush}"/>
                <Setter TargetName="PART_HelperText" Property="Foreground" Value="{DynamicResource DestructiveBrush}"/>
            </Trigger>
            
            <!-- Disabled state with fade animation -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Cursor" Value="No"/>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PART_Border"
                                           Storyboard.TargetProperty="Opacity"
                                           To="0.5"
                                           Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PART_Border"
                                           Storyboard.TargetProperty="Opacity"
                                           To="1"
                                           Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            
            <!-- Hide helper text when empty or null -->
            <Trigger Property="HelperText" Value="">
                <Setter TargetName="PART_HelperText" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HelperText" Value="{x:Null}">
                <Setter TargetName="PART_HelperText" Property="Visibility" Value="Collapsed"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Default PasswordBox Style synchronized with TextBox -->
    <Style TargetType="{x:Type controls:ShadcnPasswordBox}">
        <Setter Property="Template" Value="{DynamicResource ShadcnPasswordBoxTemplate}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Padding" Value="12,8"/>
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="MinHeight" Value="36"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Focusable" Value="True"/>
    </Style>

    <!-- Large PasswordBox Style -->
    <Style x:Key="ShadcnPasswordBoxLargeStyle" TargetType="{x:Type controls:ShadcnPasswordBox}"
           BasedOn="{StaticResource {x:Type controls:ShadcnPasswordBox}}">
        <Setter Property="Padding" Value="16,12"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="MinHeight" Value="44"/>
    </Style>

    <!-- Small PasswordBox Style -->
    <Style x:Key="ShadcnPasswordBoxSmallStyle" TargetType="{x:Type controls:ShadcnPasswordBox}"
           BasedOn="{StaticResource {x:Type controls:ShadcnPasswordBox}}">
        <Setter Property="Padding" Value="8,6"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="MinHeight" Value="32"/>
    </Style>

</ResourceDictionary>
