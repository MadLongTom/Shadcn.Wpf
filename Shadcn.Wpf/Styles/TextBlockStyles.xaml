<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Shadcn.Wpf.Controls"
                    xmlns:converters="clr-namespace:Shadcn.Wpf.Converters">

    <!-- ShadcnTextBlock Default Style -->
    <Style TargetType="{x:Type controls:ShadcnTextBlock}">
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
        <Setter Property="TextTrimming" Value="None"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        
        <!-- Text Size Styles -->
        <Style.Triggers>
            <!-- Size Triggers -->
            <Trigger Property="TextSize" Value="ExtraSmall">
                <Setter Property="FontSize" Value="10"/>
                <Setter Property="LineHeight" Value="14"/>
            </Trigger>
            <Trigger Property="TextSize" Value="Small">
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="LineHeight" Value="16"/>
            </Trigger>
            <Trigger Property="TextSize" Value="Default">
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="LineHeight" Value="20"/>
            </Trigger>
            <Trigger Property="TextSize" Value="Large">
                <Setter Property="FontSize" Value="16"/>
                <Setter Property="LineHeight" Value="24"/>
            </Trigger>
            <Trigger Property="TextSize" Value="ExtraLarge">
                <Setter Property="FontSize" Value="18"/>
                <Setter Property="LineHeight" Value="28"/>
            </Trigger>
            <Trigger Property="TextSize" Value="Heading1">
                <Setter Property="FontSize" Value="36"/>
                <Setter Property="LineHeight" Value="40"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </Trigger>
            <Trigger Property="TextSize" Value="Heading2">
                <Setter Property="FontSize" Value="30"/>
                <Setter Property="LineHeight" Value="36"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </Trigger>
            <Trigger Property="TextSize" Value="Heading3">
                <Setter Property="FontSize" Value="24"/>
                <Setter Property="LineHeight" Value="32"/>
                <Setter Property="FontWeight" Value="SemiBold"/>
            </Trigger>
            <Trigger Property="TextSize" Value="Heading4">
                <Setter Property="FontSize" Value="20"/>
                <Setter Property="LineHeight" Value="28"/>
                <Setter Property="FontWeight" Value="SemiBold"/>
            </Trigger>

            <!-- Variant Triggers -->
            <Trigger Property="Variant" Value="Default">
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
            </Trigger>
            <Trigger Property="Variant" Value="Primary">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}"/>
            </Trigger>
            <Trigger Property="Variant" Value="Secondary">
                <Setter Property="Foreground" Value="{DynamicResource MutedForegroundBrush}"/>
            </Trigger>
            <Trigger Property="Variant" Value="Success">
                <Setter Property="Foreground" Value="{DynamicResource SuccessBrush}"/>
            </Trigger>
            <Trigger Property="Variant" Value="Warning">
                <Setter Property="Foreground" Value="{DynamicResource WarningBrush}"/>
            </Trigger>
            <Trigger Property="Variant" Value="Destructive">
                <Setter Property="Foreground" Value="{DynamicResource DestructiveBrush}"/>
            </Trigger>
            <Trigger Property="Variant" Value="Accent">
                <Setter Property="Foreground" Value="{DynamicResource AccentBrush}"/>
            </Trigger>

            <!-- Text Formatting Triggers -->
            <Trigger Property="IsEmphasized" Value="True">
                <Setter Property="FontWeight" Value="Bold"/>
            </Trigger>
            <Trigger Property="IsItalic" Value="True">
                <Setter Property="FontStyle" Value="Italic"/>
            </Trigger>
            
            <!-- Custom TextColor Override -->
            <DataTrigger Binding="{Binding TextColor, RelativeSource={RelativeSource Self}, Converter={x:Static converters:CommonConverters.IsNotNullConverter}}" Value="True">
                <Setter Property="Foreground" Value="{Binding TextColor, RelativeSource={RelativeSource Self}}"/>
            </DataTrigger>

            <!-- Line Height Override -->
            <DataTrigger Binding="{Binding LineHeight, RelativeSource={RelativeSource Self}, Converter={x:Static converters:CommonConverters.IsNotNaNConverter}}" Value="True">
                <Setter Property="LineHeight" Value="{Binding LineHeight, RelativeSource={RelativeSource Self}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Text Decoration Styles -->
    <Style x:Key="ShadcnTextBlockWithDecorations" TargetType="{x:Type controls:ShadcnTextBlock}" BasedOn="{StaticResource {x:Type controls:ShadcnTextBlock}}">
        <Style.Triggers>
            <!-- Underline Trigger -->
            <Trigger Property="IsUnderlined" Value="True">
                <Setter Property="TextDecorations" Value="Underline"/>
            </Trigger>
            
            <!-- Strikethrough Trigger -->
            <Trigger Property="IsStrikethrough" Value="True">
                <Setter Property="TextDecorations" Value="Strikethrough"/>
            </Trigger>
            
            <!-- Combined Decorations -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsUnderlined" Value="True"/>
                    <Condition Property="IsStrikethrough" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="TextDecorations">
                    <Setter.Value>
                        <TextDecorationCollection>
                            <TextDecoration Location="Underline"/>
                            <TextDecoration Location="Strikethrough"/>
                        </TextDecorationCollection>
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- Predefined Text Styles -->
    
    <!-- Display Text -->
    <Style x:Key="ShadcnDisplayText" TargetType="{x:Type controls:ShadcnTextBlock}" BasedOn="{StaticResource {x:Type controls:ShadcnTextBlock}}">
        <Setter Property="TextSize" Value="Heading1"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <!-- Title Text -->
    <Style x:Key="ShadcnTitleText" TargetType="{x:Type controls:ShadcnTextBlock}" BasedOn="{StaticResource {x:Type controls:ShadcnTextBlock}}">
        <Setter Property="TextSize" Value="Heading2"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <!-- Subtitle Text -->
    <Style x:Key="ShadcnSubtitleText" TargetType="{x:Type controls:ShadcnTextBlock}" BasedOn="{StaticResource {x:Type controls:ShadcnTextBlock}}">
        <Setter Property="TextSize" Value="Heading3"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <!-- Body Text -->
    <Style x:Key="ShadcnBodyText" TargetType="{x:Type controls:ShadcnTextBlock}" BasedOn="{StaticResource {x:Type controls:ShadcnTextBlock}}">
        <Setter Property="TextSize" Value="Default"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="LineHeight" Value="24"/>
    </Style>

    <!-- Caption Text -->
    <Style x:Key="ShadcnCaptionText" TargetType="{x:Type controls:ShadcnTextBlock}" BasedOn="{StaticResource {x:Type controls:ShadcnTextBlock}}">
        <Setter Property="TextSize" Value="Small"/>
        <Setter Property="Variant" Value="Secondary"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <!-- Code Text -->
    <Style x:Key="ShadcnCodeText" TargetType="{x:Type controls:ShadcnTextBlock}" BasedOn="{StaticResource {x:Type controls:ShadcnTextBlock}}">
        <Setter Property="FontFamily" Value="Consolas, 'Courier New', monospace"/>
        <Setter Property="Background" Value="{DynamicResource MutedBrush}"/>
        <Setter Property="Padding" Value="4,2"/>
        <Setter Property="TextSize" Value="Small"/>
    </Style>

    <!-- Link Text -->
    <Style x:Key="ShadcnLinkText" TargetType="{x:Type controls:ShadcnTextBlock}" BasedOn="{StaticResource {x:Type controls:ShadcnTextBlock}}">
        <Setter Property="Variant" Value="Primary"/>
        <Setter Property="IsUnderlined" Value="True"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryForegroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Error Text -->
    <Style x:Key="ShadcnErrorText" TargetType="{x:Type controls:ShadcnTextBlock}" BasedOn="{StaticResource {x:Type controls:ShadcnTextBlock}}">
        <Setter Property="Variant" Value="Destructive"/>
        <Setter Property="TextSize" Value="Small"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <!-- Success Text -->
    <Style x:Key="ShadcnSuccessText" TargetType="{x:Type controls:ShadcnTextBlock}" BasedOn="{StaticResource {x:Type controls:ShadcnTextBlock}}">
        <Setter Property="Variant" Value="Success"/>
        <Setter Property="TextSize" Value="Small"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <!-- Warning Text -->
    <Style x:Key="ShadcnWarningText" TargetType="{x:Type controls:ShadcnTextBlock}" BasedOn="{StaticResource {x:Type controls:ShadcnTextBlock}}">
        <Setter Property="Variant" Value="Warning"/>
        <Setter Property="TextSize" Value="Small"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

</ResourceDictionary>
